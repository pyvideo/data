{
  "copyright_text": null,
  "description": "For most developers, Python packaging feels like a magical (and cryptic) black box. Apps and libraries use a variety of tools and have different packaging challenges. Once you start reading up on this topic, you come across many seemingly random components: setuptools, pip, poetry, wheels, pyproject.toml, MANIFEST.in, virtual environments, zippapp, shiv, pex, and so on. The sheer number of concepts to master can be overwhelming, leading many programmers to conclude that packaging in Python is a mess. Before you despair, join me in this tutorial session where you'll have a chance to learn how to package and publish/deploy your library and/or application through hands-on exercises.\n\nTopics include:\n\nHow and why library packaging differs from application packaging\nDifferences between a source tree/source distribution/wheel\nDifferences between a build back-end and a build front-end (and why we even have this separation)\nTools used for packaging your library\nTools and techniques used to package your application\nTesting your package for correctness",
  "duration": 9332,
  "language": "eng",
  "recorded": "2021-05-14",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2021/schedule/"
    }
  ],
  "speakers": [
    "Bern\u00e1t Gabor"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi_webp/ApDThpsr2Fw/maxresdefault.webp",
  "title": "Python Packaging Demystified",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=ApDThpsr2Fw"
    }
  ]
}
