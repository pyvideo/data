{
  "description": "| While many programmers will agree that implementing new Software is\n  the most entertaining part of our jobs, the truth is that the vast\n  majority of developers spend a great amount of time performing\n  maintenance, which in an world that praises innovation 'is a dirty job\n  that somebody's gotta do'. In this talk I will describe a series of\n  techniques and Python tools that have proven useful for taking over a\n  legacy code base and getting it move forward, all within a well\n  defined process:\n| 1. Understand. Hold your horses! Don't touch that code yet, even it\n  you really want to. Understand the spirit of your project, its\n  architecture. Ask around, create personas, poll users, document the\n  product.\n| 2. Get yourself a safety net. Create lots of unit tests, pytest or\n  nose are your friends.\n| 3. Enhance. Start with small improvements, check and beautify your\n  code with tools such as flake8, pep8 and pylint, perform code reviews.\n",
  "duration": 1987,
  "language": "eng",
  "recorded": "2016-10-15",
  "speakers": [
    "C\u00e9sar Cardenas Desales"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/JJyifWIAM8I/hqdefault.jpg",
  "title": "So you \"want\" to maintain a Python legacy code base?",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=JJyifWIAM8I"
    }
  ]
}