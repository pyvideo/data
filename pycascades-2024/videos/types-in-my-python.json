{
  "copyright_text": "",
  "description": "It's more likely than you think!\n\nTypes, In My Python? is an analysis of Python's unique relationship to typing systems.\n\nI will start by examining Python's strange dual nature:\n\nA dynamically typed scripting language that more or less works as expected.\n\nA strongly typed language with strict limits on what you can do with an object,\n\nand now able to statically analyze your usages to make sure you're doing things right.\n\nFollowing that, I will examine some of the concepts we talk about as a community in more detail.\n\nWhat do we mean by \"duck typing\", and how does it apply in light of Python's dual nature?\n\nWhy is it static analysis, and not static typing?\n\nTo end, I will make a proposal regarding the best method to use both sides of Python's type system.\n\nThe goal is to accelerate your development and reduce tedium.\n\nIs there a happy middle ground between strict static typing and a dynamic free-for-all?",
  "duration": 1478,
  "language": "eng",
  "recorded": "2024-04-06",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://2024.pycascades.com/program/schedule/"
    },
    {
      "label": "Full playlist",
      "url": "https://www.youtube.com/playlist?list=PLcNrB7gPa-Ne6QknxKayJaEBsKfkmA72l"
    }
  ],
  "speakers": [
    "Piper Thunstrom"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/aOap9C3AfAA/maxresdefault.jpg",
  "title": "Types, In My Python?!",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=aOap9C3AfAA"
    }
  ]
}
