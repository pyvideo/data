{
    "description": "PyCon APAC 2022\uff5c\u4e00\u822c\u6f14\u8b1b Talks\uff5c\u570b\u6cf0\u91d1\u63a7 Cathay Financial Holdings / \u7f8e\u5149\u79d1\u6280 Micron \u51a0\u540d\u8d0a\u52a9\n\n\u270f\ufe0f \u5171\u7b46 Note\uff1ahttps://hackmd.io/@pycontw/rkcoIaXJi\n\ud83d\udd90\ud83c\udffb Slido\uff1ahttps://app.sli.do/event/9mocDRmn6yeMAqNbQTxXMo\n\ud83e\udea7 \u6295\u5f71\u7247 Slides\uff1ahttps://docs.google.com/presentation/d/1Iji1klGczzQ4DxN6-E-zfEN5oPMMs2LZtD482-plGAM/edit?usp=sharing\n\ud83d\udcac \u8a9e\u8a00 Language\uff1a\u82f1\u6587 English\n\ud83c\udfaf \u5c64\u7d1a Level\uff1a\u4e2d\u968e Intermediate\n\ud83d\udd0e \u5206\u985e Category\uff1a\u6e2c\u8a66 Testing\n\n\ud83d\udca1 \u6458\u8981 Abstract \ud83d\udca1\nUnit testing and code coverage are two essential aspects of an open-source codebase. These unit tests often run in spawned sub-processes or threads as sub-processes or multi-threading allow them to run parallelly. However, running unit tests in a sub-process creates a problem; as the documentation of `coverage.py` says \u2014 *\u201cMeasuring coverage in those sub-processes can be tricky because you have to modify the code spawning the process to invoke coverage.py.\u201d*. As we will see in this tutorial, as soon as we run unit tests inside a sub-process, the coverage module ignores them completely, and the coverage value goes down. Through this talk, we will build up a solution (using `coverage.py` itself) to tackle this problem! Prerequisites - - familiarity with unit testing and code coverage in Python - familiarity with CI/CD using GitHub Actions - knowledge of multi-threading, multi-processing, CodeCov, and basic data structures like queue would be helpful but is not mandatory.\n\n\ud83d\ude80 \u8b1b\u8005\u4ecb\u7d39 About Speaker - Saransh Chopra \ud83d\ude80\nSaransh is an engineering junior at the University of Delhi, pursuing a major in Information Technology and Mathematics. In daylight, he work towards his academic skills and professional commitments, and by night, he develops and maintains open-source research software, which he believes are the key to collaborative and reproducible research. He is currently a fellow at the Institute for Research and Innovation in Software for High Energy Physics (IRIS-HEP), working on the first major release of Vector. He is also working as a technical writer for FluxML, which is being funded by the Julia Programming Language. He is interested in everything a Research Software Engineer and a Machine Learning Engineer do, including Scientific Machine Learning, code optimization, developing packages, technical writing, building infrastructures, developing open-source research software, JuliaLang, and Python.\n\n#python #pycontw #pyconapac2022 #unittests #codecoverage\n\nFollow \u201cPyCon Taiwan\u201d\n\u2b50\ufe0f Official Website: https://tw.pycon.org\n\u2b50\ufe0f Facebook: https://www.facebook.com/pycontw\n\u2b50\ufe0f Instagram: https://www.instagram.com/pycontw\n\u2b50\ufe0f Twitter: https://twitter.com/PyConTW\n\u2b50\ufe0f LinkedIn: https://www.linkedin.com/company/pycontw\n\u2b50\ufe0f Blogger: https://pycontw.blogspot.com",
    "speakers": [
        "Saransh Chopra"
    ],
    "recorded": "2022-09-03",
    "title": "Code Coverage Through Unit Tests Running in Sub-Processes/Threads\uff5cSaransh Chopra\uff5cPyCon APAC 2022",
    "thumbnail_url": "https://i.ytimg.com/vi/iSwvTDy_IKw/hqdefault.jpg",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=iSwvTDy_IKw"
        }
    ]
}