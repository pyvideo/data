{
  "description": "Only after a great deal of public pressure did Microsoft agree to make\nthe specification of Microsoft Office 2007 public and even this was\nafter the fact. The result was many thousands of pages of narrative\ndescription and an extensive XML schema. Whatever one may think of the\ncompany or the format, the fact remains that for many offices Microsoft\nExcel is a standard format and we want to make it as easy as possible to\nwork with the files with Python.\n\nopenpyxl started largely as the reverse-engineering of existing files.\nWhile this allowed the project to get up and running quickly, it also\nturned out to be a dead-end when it came to supporting more advanced\nfeatures.\n\nThe Office Open XML Schema is, in effect, the domain-specific language\nfor Microsoft Office. With tools like lxml it's even possible to work\nwith this directly from Python but this requires extensive and detailed\nknowledge of something that is rarely intuitive and often downright\nconfusing. Furthermore, manipulating XML in memory can be a problem on\nvery large workbooks.\n\nIn openpyxl we introduced descriptors to deal with common types in the\nschema, and added class methods so that we could simplify parsing but\nkeep the Python API as simple as possible. This started out as a fairly\nlaborious transcription of schema to class definitions that has since\nbeen replaced by code generated by what might possibly be the world's\nworst parser \u2013 every library has to have some horrible code in it\nsomewhere!\n\nThe result was that over 200 classes and their naive tests could be\ngenerated automatically to provide near complete support for the chart\nAPI. The process isn't perfect: code rarely runs straight out of the box\nbut it has made it possible to support features that otherwise could\nonly ever be partially supported at best.\n\nThe talk will cover what tools Python provides to make this kind of\nadventure succeed and where things could be improved.\n",
  "duration": 1253,
  "language": "eng",
  "recorded": "2015-10-18",
  "speakers": [
    "Charlie Clark"
  ],
  "summary": "openpyxl started largely as the reverse-engineering of existing files.\nWhile this allowed the project to get up and running quickly, it also\nturned out to be a dead-end when it came to supporting more advanced\nfeatures. This talk will explain how we've shifted to using descriptors,\ncode generation and possibly the world's worst parser for more reliable\ncode and faster development.\n",
  "thumbnail_url": "http://dl.afpy.org/pycon-fr-15/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.mp4.jpg",
  "title": "When generated code makes sense",
  "videos": [
    {
      "type": "ogv",
      "url": "http://dl.afpy.org/pycon-fr-15/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.ogv"
    },
    {
      "type": "mp4",
      "url": "http://dl.afpy.org/pycon-fr-15/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.mp4"
    },
    {
      "type": "webm",
      "url": "http://dl.afpy.org/pycon-fr-15/023%20-%20Charlie%20Clark%20-%20When%20generated%20code%20makes%20sense.webm"
    }
  ]
}
