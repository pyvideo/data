{
  "description": "Caterva: A Compressed And Multidimensional Container For Big Data\n=================================================================\n\n`Caterva <https://github.com/Blosc/Caterva>`__ is a C library on top of\n`C-Blosc2 <https://github.com/Blosc/c-blosc2>`__ that implements a\nsimple multidimensional container for compressed binary data. It adds\nthe capability to store, extract, and transform data in these\ncontainers, either in-memory or on-disk.\n\nWhile there are several existing solutions for this scenario (HDF5 is\none of the most known), Caterva brings novel features that, when taken\ntoghether, set it appart from them:\n\n-  **Leverage important features of C-Blosc2**. C-Blosc2 is the next\n   generation of the well-know, high performance C-Blosc compression\n   library (see below for a more in-depth description).\n\n-  **Fast and seamless interface with the compression engine**. While in\n   other solutions compression seems an after-thought and can implies\n   several copies of buffers internally, the interface of Caterva and\n   C-Blosc2 (its internal compression engine) is meant to be as direct\n   as possible minimizing copies and hence, increasing performance.\n\n-  **Both in-memory and on-disk paradigms are supported the same way**.\n   This allows for using the same API for data that can be either\n   in-memory or on-disk.\n\n-  **Support for a plain buffer data layout**. This allows for\n   essentially no-copy data sharing among existing libraries (NumPy),\n   allowing to use existing functionality to be used directly in Caterva\n   without loosing performance.\n\nAlong this features, there is an important 'mis-feature': Caterva is\n**type- less**. Lacking the notion of data type means that Caterva\ncontainers are not meant to be used in computations directly, but rather\nin combination with other higher-level libraries. While this can be seen\nas a drawback, it actually favors simplicity and leaves up to the user\nthe addition of the types that he is more interested in, which is far\nmore flexible than typed-aware libraries (HDF5, NumPy and many others).\n\nDuring our talk, we will describe all these Caterva features by using\n`cat4py <https://github.com/Blosc/cat4py>`__, a Python wrapper for\nCaterva. Among the points to be discussed would be:\n\n-  Introduction to the main features of Caterva.\n\n-  Description of the basic data container and its usage.\n\n-  Short discussion of different use cases:\n\n-  Create and fill high dimensional arrays.\n\n-  Get multi-dimensional slices out of the arrays.\n-  How different compression codecs and filters in the pipeline affect\n   store/retrieval performance.\n\nWe have been using Caterva in one of our internal projects for several\nmonths now, and we are pretty happy with the flexibility and easy-of-use\nthat it brings to us. This is why we decided to open-source it in the\nhope that it would benefit others, but also that others may help us in\ndeveloping it further ;-)\n\nAbout C-Blosc and C-Blosc2\n--------------------------\n\n`C-Blosc <https://github.com/Blosc/c-blosc>`__ is a high performance\ncompressor optimized for binary data. It has been designed to transmit\ndata to the processor cache faster than the traditional, non-compressed,\ndirect memory fetch approach via a memcpy() OS call. Blosc is the first\ncompressor (that we are aware of) that is meant not only to reduce the\nsize of large datasets on- disk or in-memory, but also to accelerate\nmemory-bound computations.\n\n`C-Blosc2 <https://github.com/Blosc/c-blosc2>`__ is the new major\nversion of C-Blosc, with a revamped API and support for new compressors\nand new filters (data transformations), including filter pipelining,\nthat is, the capability to apply different filters during the\ncompression pipeline, allowing for more adaptability to the data to be\ncompressed. Dictionaries are also introduced, allowing better handling\nof redundancies among independent blocks and generally increasing\ncompression ratio and performance. Last but not least, there are new\ndata containers that are meant to overcome the 32-bit limitation of the\noriginal C-Blosc. Furthermore, the new data containers are available in\nvarious formats, including in-memory and on-disk implementations.\n\nCaterva is a library on top of the Blosc2 compressor that implements a\nsimple multidimensional container for compressed binary data. It adds\nthe capability to store, extract, and transform data in these\ncontainers, either in-memory or on-disk.\n",
  "duration": 1600,
  "language": "eng",
  "recorded": "2019-09-04",
  "speakers": [
    "Francesc Alted"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/Vk2VFABjYBQ/hqdefault.jpg",
  "title": "Caterva: A Compressed And Multidimensional Container For Big Data",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Vk2VFABjYBQ"
    }
  ]
}
