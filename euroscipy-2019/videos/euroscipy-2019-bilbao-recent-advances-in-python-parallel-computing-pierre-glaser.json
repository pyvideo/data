{
  "description": "Parallel computing in Python: Current state and recent advances\n===============================================================\n\n| *Modern hardware is multi-core*. It is crucial for Python to provide\n| high-performance parallelism. This talk will expose to both\n  data-scientists and\n| library developers the current state of affairs and the recent\n  advances for\n| parallel computing with Python. The goal is to help practitioners and\n| developers to make better decisions on this matter.\n\n| I will first cover how Python can interface with parallelism, from\n  leveraging\n| external parallelism of C-extensions \u2013especially the BLAS family\u2013 to\n  Python's\n| multiprocessing and multithreading API. I will touch upon use cases,\n  e.g single\n| vs multi machine, as well as and pros and cons of the various\n  solutions for\n| each use case. Most of these considerations will be backed by\n  benchmarks from\n| the `scikit-learn <https://scikit-learn.org/stable/>`__ machine\n| learning library.\n\n| From these low-level interfaces emerged higher-level parallel\n  processing\n| libraries, such as concurrent.futures,\n| `joblib <https://joblib.readthedocs.io/en/latest/>`__ and\n| `loky <https://loky.readthedocs.io/en/latest/>`__ (used by\n| `dask <https://dask.org/>`__ and `scikit-learn <https://dask.org/>`__)\n  These\n| libraries make it easy for Python programmers to use safe and reliable\n| parallelism in their code. They can even work in more exotic\n  situations, such\n| as interactive sessions, in which Python\u2019s native multiprocessing\n  support tends\n| to fail. I will describe their purpose as well as the canonical\n  use-cases they\n| address.\n\n| The last part of this talk will focus on the most recent advances in\n  the Python\n| standard library, addressing one of the principal performance\n  bottlenecks of\n| multi-core/multi-machine processing, which is data communication. We\n  will\n| present a `new\n  API <https://docs.python.org/3.8/library/multiprocessing.shared_memory.html>`__\n| for shared-memory management between different Python processes, and\n| performance improvements for the serialization of large Python objects\n  (`PEP\n  574 <https://www.python.org/dev/peps/pep-0574/>`__, `pickle\n  extensions <https://github.com/cloudpipe/cloudpickle>`__). These\n  performance\n| improvements will be leveraged by distributed data science frameworks\n  such as\n| dask, `ray <https://ray.readthedocs.io/en/latest/>`__ and\n| `pyspark <https://spark.apache.org/docs/latest/api/python/index.html>`__.\n\n| *Modern hardware is multi-core*. It is crucial for Python to provide\n| efficient parallelism. This talk exposes the current state and\n  advances\n| in Python parallelism, in order to help practitioners and developers\n  take\n| better decisions on this matter.\n",
  "duration": 1802,
  "language": "eng",
  "recorded": "2019-09-05",
  "speakers": [
    "Pierre Glaser"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/ifESLJWE1i8/hqdefault.jpg",
  "title": "Recent advances in python parallel computing",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=ifESLJWE1i8"
    }
  ]
}
