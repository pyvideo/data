{
  "description": "| Hypothesis is a testing package that will search for counterexamples\n  to your\n| assertions \u2013 so you can write tests that provide a high-level\n  description of your\n| code or system, and let the computer attempt a Popperian\n  falsification. If it\n| fails, your code is (probably) OK\u2026 and if it succeeds you have a\n  minimal input\n| to debug.\n\n| Come along and learn the principles of property-based testing, how to\n  use\n| Hypothesis, and how to use it to check scientific code \u2013 whether\n  highly- polished\n| or quick-and-dirty!\n\n| You can even use it to test 'black boxes', such as simulations, where\n  we have no\n| way of independently verifying that some input leads to the right\n  output!\n| Intrigued? Come and learn about the power of embedding assertions in\n  your\n| code, and metamorphic relations in your tests!\n\nTesting research code can be difficult, but is essential for robust\nresults. Using Hypothesis, a tool for property-based testing, I'll show\nhow testing can be both easier and dramatically more powerful - even for\ncomplex \"black box\" codes.\n",
  "duration": 1807,
  "recorded": "2019-09-03",
  "speakers": [
    "Zac Hatfield-Dodds"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/k_s62EHWWeg/hqdefault.jpg",
  "title": "Sufficiently Advanced Testing with Hypothesis",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=k_s62EHWWeg"
    }
  ]
}
