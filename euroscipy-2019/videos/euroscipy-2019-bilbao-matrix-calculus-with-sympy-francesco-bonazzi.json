{
  "description": "The recent popularization of libraries relying on tensor algebra\noperations has led to a rise in the requirement of computational tools\nto calculate the gradient and hessian of tensorial expressions. The\nderivative of a tensor *A* by tensor *B* is the tensor containing all\ncombinations of the elements of *A* derived by the elements of *B*.\nWhile tensor derivative operations are commonly supported by most\ncomputer algebra systems and frameworks through iterative algorithms,\nthese derivatives can be expressed mathematically in closed-form\nsolutions, which are computationally many orders of magnitude faster.\n\nSymPy has been recently extended in order to support the computation of\nsymbolic matrix derivatives, and is currently the only computer algebra\nsystem endowed with this feature (lacking even in Wolfram Mathematica).\nMatrix calculus plays indeed a central role in optimization and machine\nlearning, but was unfortunately often limited to pen on papers or chalk\non blackboards.\n\nIn this talk, we will introduce matrix expressions in SymPy, and address\nthe three ways they can be represented:\n\n1. explicit matrices with symbolic entries,\n2. indexed symbols with proper summation convention,\n3. implicit matrix expressions.\n\nWe illustrate the way matrix derivatives are implemented for all three\nrepresentations, with special emphasis to the third way, the fastest and\nmost elegant. The derived expressions can then be passed to SymPy's code\ngeneration utilities and the resulting code can be compared in speed\nwith other frameworks, such as TensorFlow.\n\nThe support of matrix derivatives can turn SymPy into a simple tool to\ncreate the code for optimization algorithms or the code to train machine\nlearning algorithms. The code generation utilities of SymPy are indeed\naware of how to export matrix expressions into other programming\nlanguages and frameworks. We will give some examples using maximum\nlikelihood estimation and the expectation-maximization algorithms.\n\nIn this talk we explore a recent addition to SymPy which allows to find\nclosed-form solutions to matrix derivatives. As a consequence,\ngeneration of efficient code for optimization problems is now much\neasier.\n",
  "duration": 1694,
  "language": "eng",
  "recorded": "2019-09-05",
  "speakers": [
    "Francesco Bonazzi"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/rBH_7knxZQQ/hqdefault.jpg",
  "title": "Matrix calculus with SymPy",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=rBH_7knxZQQ"
    }
  ]
}
