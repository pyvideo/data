{
    "copyright_text": "CC BY",
    "description": "Modifying existing code is just the worst. It's a tangled mess of\ndependencies, you don't know the original author's intent, and simple\nchanges feel like they break the world. But it can be better. Wouldn't\nit be nice to be in a codebase where you primarily added new code and\ndidn't touch the old stuff? We can achieve this by viewing your code\nthrough the lens of extensibility.\n\nIn this talk, you'll learn what extensibility means, and some common\npatterns for making your code more extensible. We'll take a hard look at\nthe Open-Closed Principle and how to deal with a mess of dependencies.\nWe'll then walk through how to make your code composable so that it's\neasier to build up abstractions. We'll finish off by looking through two\narchitectural styles that promote extensilbility: event-driven\narchitectures and pluggable architectures.\n\nSoftware is going to change (that's why we call it \"soft\"ware). That's\ninevitable. How your codebase withstands that change is up to you. Don't\nwrite a tangled, fragile mess that is incomprehensible. Make it easy to\nextend, and you'll greatly extend the lifetime of your products.\n",
    "language": "eng",
    "recorded": "2024-05-17",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2024/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2024/schedule/presentation/78/"
        }
    ],
    "speakers": [
        "Pat Viafore"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/5ZwDLyDCZVs/hqdefault.jpg",
    "title": "Extensible Python: Robustness Through Addition",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=5ZwDLyDCZVs"
        }
    ]
}