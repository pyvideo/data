{
    "copyright_text": "CC BY",
    "description": "Companies and malware authors use packaging tools to distribute products\nand payloads as Python bytecode (.pyc) files, often thinking that their\nsecret logic will be unreadable by humans. Using a simple example, we\nwill teach curious developers how to interpret and decompile Python\nbytecode by hand. Finally, we will discuss challenges and solutions of\nautomating Python decompilation.\n\nThis talk is targeted towards intrepid intermediate Python developers\nwho are looking to take a look under the hood, and reverse engineers who\nare looking to add Python binaries to their repertoire. Unlike previous\nbytecode-oriented talks at PyCon, which primarily focus on Python's\nexecution model, this talk is primarily interested in recovering Python\nsource code from Python bytecode.\n",
    "language": "eng",
    "recorded": "2024-05-17",
    "related_urls": [
        {
            "label": "Conference Website",
            "url": "https://us.pycon.org/2024/"
        },
        {
            "label": "Presentation Webpage",
            "url": "https://us.pycon.org/2024/schedule/presentation/118/"
        }
    ],
    "speakers": [
        "Josh Wiedemeier"
    ],
    "thumbnail_url": "https://i.ytimg.com/vi/mCkqz8jo19M/hqdefault.jpg",
    "title": "There and Back Again: Reverse Engineering Python Binaries",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=mCkqz8jo19M"
        }
    ]
}