{
  "copyright_text": "CC BY",
  "description": "A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by core developers, packaging PEPs are written by members of the Python Packaging Authority (PyPA). How we build Python packages was standardized in 2016 through PEP-517 and PEP-518. Editable installs, while widely used and well known through the -e flag in pip, proved to be controversial, so it got left out of those proposals. It has taken another five years to reach a consensus, and I'm happy to say that -- through PEP-660 -- we now have a way for all build back-ends to support editable installs. Join me in this talk, where I'll tell a tale explaining how having competing PEPs and exhausting discussions -- while tiresome -- led to a better solution. Plus, you'll also understand the different options we considered and the solution we developed in the end.",
  "duration": 1754,
  "language": "eng",
  "recorded": "2022-04-27",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2022/schedule/"
    }
  ],
  "speakers": [
    "Bern\u00e1t G\u00e1bor"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/Z_-PuPwN6ZI/hqdefault.jpg",
  "title": "How we standardized editable installs - PEP-660 vs. PEP-662",
  "videos": [
    {
      "length": 1754,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Z_-PuPwN6ZI"
    }
  ]
}
