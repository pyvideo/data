{
  "copyright_text": null,
  "description": "La Continuous Delivery \u00e8 una condizione mentale - PyCon Italia 2022\n\nIn questo talk racconter\u00f2 il mio percorso evolutivo da un approccio\nwaterfall a quello iterativo passando per i tanti errori commessi.\nMostrer\u00f2 come abbiamo realizzato un template che aiuta nel processo di\nContinuous Delivery utilizzando Kubernetes, Docker, Python e Terraform.\nVedo la gente passare i venerd\u00ec a fare rilasci in produzione e passare\nil weekend a fare bug fixing. Vedo la gente stufa di fare sempre le\nstesse attivit\u00e0 ripetitive e perseverare nella solita routine da\ndeveloper frustrato. Ma tutto questo si pu\u00f2 evitare con un cambio di\nmentalit\u00e0. Quello che voglio raccontare in questo talk \u00e8 il mio percorso\nevolutivo da un approccio waterfall a quello iterativo passando per i\ntanti errori commessi.\n\nRacconter\u00f2 come abbiamo realizzato un template che aiuta nel processo di\nContinuous Delivery, dove la parola \u201ccontinuous\u201d \u00e8 quella che definisce\nbene l\u2019importanza di questo processo. Nell\u2019Agile Software Development,\nil rilascio del software funzionante \u00e8 uno dei punti pi\u00f9 importanti e\nquesto deve avvenire spesso. Per poter rilasciare nuove funzionalit\u00e0\nper\u00f2, dovremo scrivere tutti i test necessari, eseguirli, creare una\nbuild e infine effettuare il deploy vero e proprio.\n\nNello sviluppo del software moderno la Continuous Delivery (CD) \u00e8 quel\nprocesso che permette all\u2019intero team di affrontare qualsiasi\ncambiamento, come nuove feature, bugfix o esperimenti, in un modo\nsostenibile, sicuro e rapido. In questo processo generalmente vengono\nutilizzate tra le altre cose, due pratiche per effettuare i rilasci\ncontinui: Continuous Integration (CI) e Continuous Deployment (CD).\n\nIn questo talk racconter\u00f2 come, insieme ai miei colleghi, siamo arrivati\nalla costruzione di un processo automatizzato per effettuare rilasci sin\ndal primo commit utilizzando Kubernetes, Docker, Python e Terraform per\nla creazione di applicazioni web basate su Django e React.\n\nSlide:\n\nSpeaker: Raffaele Colace\n",
  "duration": 1690,
  "language": "ita",
  "recorded": "2022-06-03",
  "speakers": [
    "Raffaele Colace"
  ],
  "tags": [
    "agile",
    "best practice",
    "case study",
    "devops",
    "django"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/CxWivBmSReo/maxresdefault.jpg",
  "title": "La Continuous Delivery \u00e8 una condizione mentale",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=CxWivBmSReo"
    }
  ]
}